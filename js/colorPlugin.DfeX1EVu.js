import{c as C,a as j,b as z,d as A}from"./cutout-utils.DM8CbSVl.js";const R={id:"color",name:"颜色抠图",description:"通过拾取颜色并基于颜色相似度进行抠图，适合纯色或渐变背景",async process(u,n){const{canvas:a,ctx:h,originalImage:k,pickedColors:x,setStatus:i,yieldToUI:r}=u;if(!x||x.length===0)return{success:!1,message:"请先拾取要处理的颜色"};try{i("正在优化颜色列表...");const l=n.tolerance||30,m=[];for(const t of x){let s=!1;for(const e of m)if(C(t.r,t.g,t.b,e.r,e.g,e.b)<=l){s=!0;break}s||m.push(t)}await r(),i(`正在进行颜色抠图（使用 ${m.length} 个颜色）...`),a.width=k.width,a.height=k.height,h.clearRect(0,0,a.width,a.height),h.drawImage(k,0,0,a.width,a.height);const y=h.getImageData(0,0,a.width,a.height),f=y.data,d=new Float32Array(a.width*a.height);i("正在分析颜色...");const I=a.width*a.height,g=1e5,c=Math.ceil(I/g),D=async t=>{const s=t*g,e=Math.min(s+g,I);for(let o=s;o<e;o++){const p=o*4,M=f[p],$=f[p+1],v=f[p+2];let b=!1;for(const P of m)if(C(M,$,v,P.r,P.g,P.b)<=l){b=!0;break}n.mode==="remove"?d[o]=b?0:1:d[o]=b?1:0}},w=4;for(let t=0;t<c;t+=w){const s=[];for(let e=0;e<w&&t+e<c;e++)s.push(D(t+e));await Promise.all(s),i(`正在分析颜色... ${Math.round((t+s.length)/c*100)}%`),await r()}await r(),n.expand!==0&&(i("正在调整边缘..."),j(d,a.width,a.height,n.expand),await r()),n.feather>0&&(i("正在羽化边缘..."),z(d,a.width,a.height,n.feather),await r()),i("正在生成最终结果...");const S=async t=>{const s=t*g,e=Math.min(s+g,I);for(let o=s;o<e;o++){const p=o*4,M=d[o];f[p+3]=Math.round(M*255)}};for(let t=0;t<c;t+=w){const s=[];for(let e=0;e<w&&t+e<c;e++)s.push(S(t+e));await Promise.all(s),i(`正在生成最终结果... ${Math.round((t+s.length)/c*100)}%`),await r()}return await r(),u.maskShapes&&u.maskShapes.length>0&&(i("正在删除遮罩区域..."),A(y,u.maskShapes),await r()),h.putImageData(y,0,0),{success:!0,message:"颜色抠图处理完成",imageData:h.getImageData(0,0,a.width,a.height)}}catch(l){return console.error("颜色抠图处理失败:",l),{success:!1,message:`处理失败: ${l.message}`}}}};export{R as colorPlugin};
