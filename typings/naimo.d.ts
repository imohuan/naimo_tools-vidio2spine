/**
 * Naimo Tools 插件 API 类型声明
 * 
 * @version 2.0
 * @date 2025-10-12
 * 
 * 本文件由脚本自动生成，请勿手动修改
 * 生成脚本: scripts/generate-naimo-types.js
 * 源文件: src/main/preloads/webpagePreload.ts (动态分析提取)
 */

// Generated by dts-bundle-generator v9.5.1

/** 提供正则搜索 */
export interface RegexSearch {
	/** 类型 */
	type: "regex";
	/** 正则匹配 */
	match?: string;
	/** 排除条件 */
	exclude?: string;
	/** 最小长度 */
	minLength?: number;
	/** 最大长度 */
	maxLength?: number;
}
/** 默认： 提供文本搜索 name，path，description，anonymousSearchFields */
export interface TextSearch {
	/** 类型 */
	type: "text";
	/** 最小长度 */
	minLength?: number;
	/** 最大长度 */
	maxLength?: number;
}
/** 提供图片搜索 */
export interface ImgSearch {
	/** 类型 */
	type: "img";
}
/** 提供文件搜索 */
export interface FileSearch {
	/** 类型 */
	type: "files";
	/** 文件类型 */
	fileType: "file" | "directory";
	/** 文件扩展名 */
	extensions?: string[];
	/** 正则匹配文件名称 */
	match?: string;
	/** 最少文件数 (可选) */
	minLength?: number;
	/** 最多文件数 (可选) */
	maxLength?: number;
}
export type AppItem = (RegexSearch | TextSearch | ImgSearch | FileSearch) & {
	/** 应用名称 */
	name: string;
	/** 应用路径 英文 */
	path: string;
	/** 应用完整路径(包含插件ID前缀)*/
	fullPath?: string;
	/** 应用图标，null 表示无图标 */
	icon: string | null;
	/** 分类 */
	category?: string;
	/** 应用平台 默认所有平台 */
	platform?: ("windows" | "macos" | "linux")[];
	/** 应用描述 */
	description?: string;
	/** 匿名搜索字段列表（用于匿名搜索匹配） */
	anonymousSearchFields?: string[];
	/** 不主动显示搜索框 */
	notVisibleSearch?: boolean;
	/** 排序权重 */
	weight?: number;
	/** (系统配置) 元数据配置 */
	__metadata?: {
		/** 是否启用删除功能 */
		enableDelete?: boolean;
		/** 是否启用固定功能 */
		enablePin?: boolean;
	};
};
declare enum LifecycleType {
	/** 前台模式：关闭时销毁 */
	FOREGROUND = "foreground",
	/** 后台模式：关闭时隐藏，支持后台运行 */
	BACKGROUND = "background"
}
/**
 * 插件功能进入/搜索时传递的数据类型定义
 */
export interface PluginItemData {
	files: {
		/** 文件名称 */
		name: string;
		/** 文件路径 */
		path: string;
		/** 文件大小，单位字节 */
		size: number;
		/** 文件类型（扩展名或 mime） */
		type: string;
		/** 原始文件类型 */
		originalType: string;
	}[];
	/** 用户输入的搜索文本 */
	searchText: string;
	/** 是否由热键触发功能 */
	hotkeyEmit: boolean;
	/** 功能完整路径（包含插件ID前缀） */
	fullPath: string;
}
/** 插件项目类型 - 基于新的搜索系统 AppItem */
export type PluginItem = Partial<AppItem> & {
	/** 功能名称 */
	name: string;
	/** 功能路径（英文标识） */
	path: string;
	/** 功能完整路径（包含插件ID前缀，可选） */
	fullPath?: string;
	/** 功能图标，null 表示无图标 */
	icon: string | null;
	/** 插件ID */
	pluginId?: string;
	/** 开机启动 */
	autoStart?: boolean;
	/** 生命周期类型 */
	lifecycleType?: LifecycleType;
	/** 单例 默认 true */
	singleton?: boolean;
	/** 推荐 */
	recommend?: boolean;
	[key: string]: any;
};
/**
 * 下载管理器共享类型定义
 */
/**
 * 下载参数接口
 */
export interface DownloadParams {
	/** 下载链接 */
	url: string;
	/** 保存路径 */
	filePath?: string;
	/** 保存目录 */
	directory?: string;
	/** 文件名 */
	saveAsFilename?: string;
	/** 是否显示另存为对话框 */
	showSaveDialog?: boolean;
	/** 另存为对话框选项 */
	saveDialogOptions?: {
		title?: string;
		defaultPath?: string;
	};
	/** 是否覆盖已存在的文件 */
	overwrite?: boolean;
	/** 是否在应用关闭时持久化下载 */
	persistOnAppClose?: boolean;
	/** 附加元数据 */
	metadata?: any;
}
/**
 * 下载状态接口
 */
export interface DownloadStatus {
	/** 下载ID */
	id: string;
	/** 下载链接 */
	url: string;
	/** 保存路径 */
	filePath: string;
	/** 文件名 */
	filename: string;
	/** 下载进度（0-100） */
	progress: number;
	/** 下载状态 */
	status: "pending" | "downloading" | "completed" | "paused" | "cancelled" | "error" | "interrupted";
	/** 已接收字节数 */
	bytesReceived: number;
	/** 总字节数 */
	totalBytes: number;
	/** 下载速率（字节/秒） */
	downloadRate: number;
	/** 估计剩余时间（秒） */
	estimatedTimeRemaining: number;
	/** 附加元数据 */
	metadata?: any;
}
/**
 * 下载事件接口
 */
export interface DownloadEvents {
	/** 下载开始事件 */
	"download-started": {
		id: string;
		filename: string;
		totalBytes: number;
	};
	/** 下载进度事件 */
	"download-progress": DownloadStatus;
	/** 下载完成事件 */
	"download-completed": {
		id: string;
		filePath: string;
		metadata?: any;
	};
	/** 下载错误事件 */
	"download-error": {
		id: string;
		error: string;
	};
	/** 下载暂停事件 */
	"download-paused": {
		id: string;
	};
	/** 下载恢复事件 */
	"download-resumed": {
		id: string;
	};
	/** 下载取消事件 */
	"download-cancelled": {
		id: string;
	};
	/** 下载中断事件 */
	"download-interrupted": {
		id: string;
	};
	/** 下载持久化事件 */
	"download-persisted": {
		id: string;
		persistedFilePath: string;
	};
}
/**
 * 下载事件回调函数类型
 */
export type DownloadEventCallback<T extends keyof DownloadEvents> = (data: DownloadEvents[T]) => void;
declare function startDownload(params: DownloadParams): Promise<string>;
declare function pauseDownload(id: string): Promise<boolean>;
declare function resumeDownload(id: string): Promise<boolean>;
declare function cancelDownload(id: string): Promise<boolean>;
declare function getDownloadStatus(id: string): Promise<DownloadStatus | null>;
declare function getAllDownloads(): Promise<DownloadStatus[]>;
declare function getActiveDownloadCount(): Promise<number>;
declare function restoreDownload(restoreData: any): Promise<string>;
declare function selectDownloadDirectory(): Promise<string | null>;
declare function openDownloadFolder(filePath: string): Promise<boolean>;
declare function deleteDownload(id: string, deleteFile?: boolean): Promise<boolean>;
declare function removeAllListeners(): void;
declare function onDownloadStarted(callback: DownloadEventCallback<"download-started">): () => void;
declare function onDownloadProgress(callback: DownloadEventCallback<"download-progress">): () => void;
declare function onDownloadCompleted(callback: DownloadEventCallback<"download-completed">): () => void;
declare function onDownloadError(callback: DownloadEventCallback<"download-error">): () => void;
declare function onDownloadPaused(callback: DownloadEventCallback<"download-paused">): () => void;
declare function onDownloadResumed(callback: DownloadEventCallback<"download-resumed">): () => void;
declare function onDownloadCancelled(callback: DownloadEventCallback<"download-cancelled">): () => void;
declare function onDownloadInterrupted(callback: DownloadEventCallback<"download-interrupted">): () => void;
declare function onDownloadPersisted(callback: DownloadEventCallback<"download-persisted">): () => void;
declare function onDownloadDeleted(callback: (data: {
	id: string;
}) => void): () => void;
/**
 * Naimo API 类型定义
 * 兼容 uTools API 风格
 */
/**
 * 数据库文档接口
 * 文档数据库中存储的数据结构
 */
export interface DbDoc {
	/** 文档唯一标识符 */
	_id: string;
	/** 文档修订版本号（用于冲突检测） */
	_rev?: string;
	/** 其他自定义字段 */
	[key: string]: any;
}
/**
 * 数据库操作结果
 * 执行数据库操作后返回的结果对象
 */
export interface DbResult {
	/** 文档 ID */
	id: string;
	/** 文档修订版本号 */
	rev?: string;
	/** 操作是否成功 */
	ok?: boolean;
	/** 是否发生错误 */
	error?: boolean;
	/** 错误名称 */
	name?: string;
	/** 错误消息 */
	message?: string;
}
/**
 * 显示器信息接口
 * 包含显示器的物理属性和工作区信息
 */
export interface Display {
	/** 显示器唯一标识符 */
	id: number;
	/** 显示器边界（屏幕在桌面坐标系中的位置和大小） */
	bounds: {
		x: number;
		y: number;
		width: number;
		height: number;
	};
	/** 工作区域（不包含任务栏等系统UI的可用区域） */
	workArea: {
		x: number;
		y: number;
		width: number;
		height: number;
	};
	/** 缩放因子（如 1.0 表示 100%，1.5 表示 150%） */
	scaleFactor: number;
	/** 旋转角度（0, 90, 180, 270） */
	rotation: number;
	/** 是否为内置显示器（笔记本屏幕为 true） */
	internal: boolean;
}
/**
 * DOM 解析配置接口
 */
export interface DomParserConfig {
	/** CSS 选择器表达式 */
	cls: string;
	/** 字段描述 */
	desc?: string;
	/** 后处理函数 */
	process?: (value: any) => any;
	/** 子节点配置 */
	children?: DomParserConfig[];
	/** 字段名称 */
	name?: string;
}
/**
 * HTML 获取结果接口
 */
export interface HtmlFetchResult {
	/** 原始HTML内容 */
	html: string;
	/** 根据配置解析数据 */
	getConfig: (config: DomParserConfig | DomParserConfig[]) => any;
	/** 获取页面标题 */
	getTitle: () => any;
	/** 获取所有链接 */
	getLinks: () => any;
	/** 获取所有图片 */
	getImages: () => any;
}
/**
 * 窗口配置接口
 * 用于配置 UBrowser 浏览器窗口的外观和行为
 */
export interface WindowConfig {
	/** 是否显示窗口（默认 true） */
	show?: boolean;
	/** 窗口宽度（像素） */
	width?: number;
	/** 窗口高度（像素） */
	height?: number;
	/** 窗口 X 坐标 */
	x?: number;
	/** 窗口 Y 坐标 */
	y?: number;
	/** 是否居中显示 */
	center?: boolean;
	/** 最小宽度 */
	minWidth?: number;
	/** 最小高度 */
	minHeight?: number;
	/** 最大宽度 */
	maxWidth?: number;
	/** 最大高度 */
	maxHeight?: number;
	/** 是否可调整大小 */
	resizable?: boolean;
	/** 是否可移动 */
	movable?: boolean;
	/** 是否可最小化 */
	minimizable?: boolean;
	/** 是否可最大化 */
	maximizable?: boolean;
	/** 是否始终置顶 */
	alwaysOnTop?: boolean;
	/** 是否全屏 */
	fullscreen?: boolean;
	/** 是否可切换全屏 */
	fullscreenable?: boolean;
	/** 是否允许窗口大于屏幕 */
	enableLargerThanScreen?: boolean;
	/** 窗口透明度（0.0 - 1.0） */
	opacity?: number;
	/** 是否显示窗口边框 */
	frame?: boolean;
	/** 页面加载超时时间（毫秒） */
	timeout?: number;
	/** 自定义请求头 */
	headers?: Record<string, string>;
	/** 是否可关闭 */
	closable?: boolean;
	/** 是否可获取焦点 */
	focusable?: boolean;
	/** 是否在任务栏中隐藏 */
	skipTaskbar?: boolean;
	/** 背景颜色（十六进制格式，如 '#ffffff'） */
	backgroundColor?: string;
	/** 是否显示阴影 */
	hasShadow?: boolean;
	/** 是否透明背景 */
	transparent?: boolean;
	/** 标题栏样式 */
	titleBarStyle?: string;
	/** 是否使用厚边框（Windows） */
	thickFrame?: boolean;
	/** 请求拦截配置 */
	requestInterception?: {
		/** 是否启用请求拦截 */
		enabled: boolean;
		/** 拦截规则正则表达式数组 */
		regex?: RegExp[];
	};
	/** 自定义 webPreferences 配置 */
	webPreferences?: any;
}
/**
 * UBrowser 实例信息
 * 浏览器执行完成后返回的实例信息
 */
export interface BrowserInstance {
	/** 浏览器实例 ID */
	id: number;
	/** 当前页面 URL */
	url: string;
	/** 当前页面标题 */
	title: string;
	/** 窗口宽度 */
	width: number;
	/** 窗口高度 */
	height: number;
	/** 窗口 X 坐标 */
	x: number;
	/** 窗口 Y 坐标 */
	y: number;
}
/**
 * 设备模拟选项
 * 用于模拟移动设备或其他设备的浏览器环境
 */
export interface DeviceOptions {
	/** 用户代理字符串（User-Agent） */
	userAgent: string;
	/** 视口尺寸 */
	size: {
		/** 宽度（像素） */
		width: number;
		/** 高度（像素） */
		height: number;
	};
}
/**
 * UBrowser API 接口
 * 链式调用模式的浏览器自动化 API
 * 所有方法（除了 run）都返回自身以支持链式调用
 */
export interface UBrowserAPI {
	/** 导航到指定 URL */
	goto(url: string, options?: WindowConfig): UBrowserAPI;
	/** 设置用户代理（User-Agent） */
	useragent(ua: string): UBrowserAPI;
	/** 设置视口大小 */
	viewport(width: number, height: number): UBrowserAPI;
	/** 隐藏浏览器窗口 */
	hide(): UBrowserAPI;
	/** 显示浏览器窗口 */
	show(): UBrowserAPI;
	/** 注入自定义 CSS 样式 */
	css(css: string): UBrowserAPI;
	/** 在页面上下文中执行 JavaScript 代码或函数 */
	evaluate(func: Function | string, ...params: any[]): UBrowserAPI;
	/** 模拟按键操作 */
	press(key: string, options?: {
		delay?: number;
	}): UBrowserAPI;
	/** 点击指定选择器的元素 */
	click(selector: string): UBrowserAPI;
	/** 在指定元素上按下鼠标 */
	mousedown(selector: string): UBrowserAPI;
	/** 释放鼠标按键 */
	mouseup(): UBrowserAPI;
	/** 上传文件到文件输入框 */
	file(selector: string, payload: string | string[] | Buffer): UBrowserAPI;
	/** 在输入框中输入文本（模拟逐字输入） */
	type(selector: string, text: string, options?: {
		delay?: number;
	}): UBrowserAPI;
	/** 直接设置输入框的值（不触发输入事件） */
	value(selector: string, value: string): UBrowserAPI;
	/** 选择下拉框选项 */
	select(selector: string, ...values: string[]): UBrowserAPI;
	/** 设置复选框或单选框的选中状态 */
	check(selector: string, checked: boolean): UBrowserAPI;
	/** 聚焦到指定元素 */
	focus(selector: string): UBrowserAPI;
	/** 滚动到指定元素或坐标位置 */
	scroll(selectorOrX: string | number, y?: number): UBrowserAPI;
	/** 粘贴文本内容 */
	paste(text: string): UBrowserAPI;
	/** 截取页面截图 */
	screenshot(options?: any): UBrowserAPI;
	/** 生成页面 PDF */
	pdf(options?: any): UBrowserAPI;
	/** 模拟设备环境（如手机、平板） */
	device(options: DeviceOptions): UBrowserAPI;
	/** 等待指定时间、选择器或函数条件满足 */
	wait(msOrSelectorOrFunc: number | string | Function, timeout?: number, ...params: any[]): UBrowserAPI;
	/** 等待选择器元素出现 */
	waitForSelector(selector: string, options?: {
		visible?: boolean;
		hidden?: boolean;
		timeout?: number;
	}): UBrowserAPI;
	/** 等待选择器元素出现（简化版） */
	when(selector: string): UBrowserAPI;
	/** 标记任务结束 */
	end(): UBrowserAPI;
	/** 打开开发者工具 */
	devTools(mode?: "right" | "bottom" | "undocked" | "detach"): UBrowserAPI;
	/** 获取指定 URL 的 Cookies */
	cookies(...urls: string[]): UBrowserAPI;
	/** 设置 Cookies */
	setCookie(...cookies: any[]): UBrowserAPI;
	/** 删除 Cookies */
	deleteCookie(...cookies: any[]): UBrowserAPI;
	/** 执行所有操作队列并返回结果 */
	run(options?: WindowConfig): Promise<[
		...any[],
		BrowserInstance
	]>;
}
/**
 * 即时执行浏览器 API 接口
 * 与 UBrowserAPI 不同，这些方法会立即执行而不是添加到队列中
 * 所有方法都返回 Promise
 */
export interface InstantBrowserAPI {
	/** 打开浏览器并跳转到指定网页 */
	goto(url: string, options?: WindowConfig): Promise<BrowserInstance>;
	/** 等待（毫秒或选择器） */
	wait(msOrSelector: number | string, timeout?: number): Promise<void>;
	/** 点击元素 */
	click(selector: string): Promise<void>;
	/** 输入文本 */
	type(selector: string, text: string, options?: {
		delay?: number;
	}): Promise<void>;
	/** 设置输入框的值 */
	value(selector: string, value: string): Promise<void>;
	/** 选择下拉框选项 */
	select(selector: string, ...values: string[]): Promise<string[]>;
	/** 模拟键盘按键 */
	press(key: string, options?: {
		delay?: number;
	}): Promise<void>;
	/** 执行自定义 JS 代码 */
	evaluate(func: Function | string, ...params: any[]): Promise<any>;
	/** 滚动页面 */
	scroll(selectorOrX: string | number, y?: number): Promise<void>;
	/** 截图 */
	screenshot(options?: any): Promise<Buffer>;
	/** 聚焦元素 */
	focus(selector: string): Promise<void>;
	/** 获取 Cookies */
	cookies(...urls: string[]): Promise<any>;
	/** 设置 Cookies */
	setCookie(...cookies: any[]): Promise<void>;
	/** 删除 Cookies */
	deleteCookie(...cookies: any[]): Promise<void>;
	/** 显示窗口 */
	show(): Promise<void>;
	/** 隐藏窗口 */
	hide(): Promise<void>;
	/** 关闭浏览器 */
	close(): Promise<void>;
	/** 获取浏览器信息 */
	getInfo(): Promise<BrowserInstance>;
}
declare const naimo: {
	log: {
		/** 记录错误日志 */
		error: (message: string, ...args: any[]) => void;
		/** 记录警告日志 */
		warn: (message: string, ...args: any[]) => void;
		/** 记录信息日志 */
		info: (message: string, ...args: any[]) => void;
		/** 记录调试日志 */
		debug: (message: string, ...args: any[]) => void;
		/** 抛出错误并显示错误对话框 */
		throw_error: (error: any, options?: {
			title?: string;
		}) => void;
	};
	/** 下载管理 */
	download: {
		startDownload: typeof startDownload;
		pauseDownload: typeof pauseDownload;
		resumeDownload: typeof resumeDownload;
		cancelDownload: typeof cancelDownload;
		getDownloadStatus: typeof getDownloadStatus;
		getAllDownloads: typeof getAllDownloads;
		getActiveDownloadCount: typeof getActiveDownloadCount;
		restoreDownload: typeof restoreDownload;
		selectDownloadDirectory: typeof selectDownloadDirectory;
		openDownloadFolder: typeof openDownloadFolder;
		deleteDownload: typeof deleteDownload;
		onDownloadStarted: typeof onDownloadStarted;
		onDownloadProgress: typeof onDownloadProgress;
		onDownloadCompleted: typeof onDownloadCompleted;
		onDownloadError: typeof onDownloadError;
		onDownloadPaused: typeof onDownloadPaused;
		onDownloadResumed: typeof onDownloadResumed;
		onDownloadCancelled: typeof onDownloadCancelled;
		onDownloadInterrupted: typeof onDownloadInterrupted;
		onDownloadPersisted: typeof onDownloadPersisted;
		onDownloadDeleted: typeof onDownloadDeleted;
		removeAllListeners: typeof removeAllListeners;
	};
	window: {
		/** 隐藏当前窗口 */
		hide: () => Promise<boolean>;
		/** 显示当前窗口 */
		show: () => Promise<boolean>;
		/** 关闭当前窗口 */
		close: () => Promise<boolean>;
		/** 最小化当前窗口 */
		minimize: () => Promise<boolean>;
		/** 最大化当前窗口 */
		maximize: () => Promise<boolean>;
		/** 设置窗口高度 */
		setHeight: (height: number) => Promise<boolean>;
		/** 设置窗口尺寸 */
		setSize: (width: number, height: number) => Promise<boolean>;
		/** 创建新窗口 */
		create: (url: string, options?: any) => Promise<{
			success: boolean;
			viewId?: string;
			error?: string;
			detached?: boolean;
		}>;
	};
	db: {
		/** 存储文档（必须包含 _id 字段） */
		put: (doc: any, name?: string) => Promise<DbResult>;
		/** 获取文档 */
		get: (id: string, name?: string) => Promise<DbDoc | null>;
		/** 删除文档 */
		remove: (id: string, name?: string) => Promise<DbResult>;
		/** 获取所有文档 */
		allDocs: (docPrefix?: string, name?: string) => Promise<DbDoc[]>;
		/** 批量存储文档 */
		bulkDocs: (docs: any[], name?: string) => Promise<DbResult[]>;
		/** 存储附件 */
		putAttachment: (id: string, data: Buffer, type: string, name?: string) => Promise<DbResult>;
		/** 获取附件 */
		getAttachment: (id: string, name?: string) => Promise<{
			data: Buffer;
			type: string;
		} | null>;
	};
	storage: {
		/** 存储键值对（支持任意类型，会自动序列化） */
		setItem: (key: string, value: any) => Promise<boolean>;
		/** 获取值 */
		getItem: (key: string) => Promise<any>;
		/** 删除键值对 */
		removeItem: (key: string) => Promise<boolean>;
		/** 清空所有存储 */
		clear: () => Promise<boolean>;
		/** 获取所有键值对 */
		getAllItems: () => Promise<Record<string, any>>;
	};
	clipboard: {
		/** 读取剪贴板文本 */
		readText: () => Promise<string>;
		/** 写入文本到剪贴板 */
		writeText: (text: string) => Promise<boolean>;
		/** 读取剪贴板图片（base64 格式） */
		readImage: () => Promise<string | null>;
		/** 写入图片到剪贴板 */
		writeImage: (imageData: string) => Promise<boolean>;
		/** 检查剪贴板是否有文本 */
		hasText: () => Promise<boolean>;
		/** 检查剪贴板是否有图片 */
		hasImage: () => Promise<boolean>;
		/** 清空剪贴板 */
		clear: () => Promise<boolean>;
	};
	shell: {
		/** 打开文件或目录 */
		openPath: (path: string) => Promise<boolean>;
		/** 打开 URL */
		openUrl: (url: string) => Promise<boolean>;
		/** 在文件管理器中显示文件 */
		showInFolder: (path: string) => Promise<void>;
		/** 移动到回收站 */
		moveToTrash: (path: string) => Promise<boolean>;
		/** 系统提示音 */
		beep: () => Promise<void>;
	};
	system: {
		/** 显示系统通知 */
		notify: (message: string, title?: string) => Promise<void>;
		/** 获取系统路径（如 'home', 'appData', 'userData', 'temp', 'downloads' 等） */
		getPath: (name: string) => Promise<string>;
		/** 获取设备唯一标识 */
		getDeviceId: () => Promise<string>;
		/** 获取应用版本号 */
		getVersion: () => Promise<string>;
		/** 获取应用名称 */
		getName: () => Promise<string>;
		/** 获取文件图标 */
		getFileIcon: (path: string) => Promise<string | null>;
		/** 获取本地地址图片 */
		getLocalImage: (path: string) => Promise<string>;
		/** 判断是否为 macOS 系统 */
		isMac: () => Promise<boolean>;
		/** 判断是否为 Windows 系统 */
		isWindows: () => Promise<boolean>;
		/** 判断是否为 Linux 系统 */
		isLinux: () => Promise<boolean>;
	};
	screen: {
		/** 截屏并获取文件路径 */
		capture: (options?: {
			sourceId?: string;
		}) => Promise<{
			success: boolean;
			filePath?: string;
			error?: string;
		}>;
		/** 获取屏幕源列表 */
		getSources: (options: {
			types: ("screen" | "window")[];
			thumbnailSize?: {
				width: number;
				height: number;
			};
		}) => Promise<Electron.DesktopCapturerSource[]>;
		/** 获取鼠标位置 */
		getCursorPosition: () => Promise<{
			x: number;
			y: number;
		}>;
		/** 获取主显示器信息 */
		getPrimaryDisplay: () => Promise<Display>;
		/** 获取所有显示器信息 */
		getAllDisplays: () => Promise<Display[]>;
		/** 获取指定点附近的显示器 */
		getDisplayNearestPoint: (point: {
			x: number;
			y: number;
		}) => Promise<Display>;
		/** 将屏幕坐标转换为 DIP 坐标 */
		screenToDipPoint: (point: {
			x: number;
			y: number;
		}) => Promise<{
			x: number;
			y: number;
		}>;
		/** 将 DIP 坐标转换为屏幕坐标 */
		dipToScreenPoint: (point: {
			x: number;
			y: number;
		}) => Promise<{
			x: number;
			y: number;
		}>;
	};
	dialog: {
		/** 显示打开文件对话框 */
		showOpen: (options?: any) => Promise<string[] | undefined>;
		/** 显示保存文件对话框 */
		showSave: (options?: any) => Promise<string | undefined>;
		/** 显示消息框 */
		showMessage: (options: any) => Promise<Electron.MessageBoxReturnValue>;
		/** 显示错误框 */
		showError: (title: string, content: string) => Promise<void>;
	};
	input: {
		/** 粘贴文本到当前活动窗口 */
		pasteText: (text: string) => Promise<boolean>;
		/** 粘贴图片到当前活动窗口 */
		pasteImage: (imageData: string) => Promise<boolean>;
		/** 粘贴文件到当前活动窗口 */
		pasteFile: (filePath: string | string[]) => Promise<boolean>;
		/** 模拟按键 */
		simulateKeyPress: (key: string) => Promise<boolean>;
		/** 模拟快捷键 */
		simulateHotkey: (modifiers: string[], key: string) => Promise<boolean>;
	};
	automation: {
		/** 使用 JSON 配置执行自动化任务 */
		automateWithJson: (config: any) => Promise<any[]>;
		/** 使用配置解析 HTML */
		parseHtmlByConfig: (config: any, html: string) => any;
		/** 获取网页 HTML */
		fetchHTML: (url: string, asyncConfig?: any) => Promise<HtmlFetchResult>;
		/** 获取 JSON 数据 */
		fetchJSON: (url: string) => Promise<any>;
	};
	ubrowser: {
		goto(url: string, options?: WindowConfig): UBrowserAPI;
	};
	ibrowser: {
		create(): InstantBrowserAPI;
	};
	/** 注册功能进入钩子（当功能被触发时调用） */
	onEnter: (callback: (params: PluginItemData) => void) => void;
	/** 注册功能退出钩子（当功能窗口关闭时调用） */
	onExit: (callback: () => void) => void;
	/** 注册搜索钩子（当用户在搜索框输入时调用） */
	onSearch: (callback: (params: any) => void) => void;
	/**
	 * 获取所有已安装插件的功能列表
	 * @param codes 功能代码数组（可选，为空则返回所有功能）
	 * @returns 插件功能列表
	 */
	getFeatures: (codes: string[]) => Promise<PluginItem[]>;
	/**
	 * 热更新
	 * @returns 执行结束后的回调
	 */
	hot(): Promise<any>;
	/**
	 * 设置搜索框可见性 (主窗口接收)
	 * @param value
	 */
	visibleInput(value: boolean): void;
};
export type Naimo = typeof naimo;

export {};

declare global {
  interface Window {
    /**
     * Naimo Tools 插件 API
     * 
     * 可在插件的 HTML 页面中通过 window.naimo 访问
     */
    naimo: Naimo;
  }
  const naimo: Naimo;
}
